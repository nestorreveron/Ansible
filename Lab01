---

## 1. Introducción y Prerrequisitos

### Objetivo del taller
- **Provisiones en Azure**: Crear dos VMs en Azure (sin usar AKS) en un entorno IaaS.
- **Instalación y configuración de Kubernetes**: Configurar el nodo de control y unir el nodo worker, utilizando *kubeadm*.
- **Despliegue de Jenkins**: Crear un Deployment de Jenkins dentro del cluster Kubernetes.
- **Automatización con Ansible**: Todo el proceso se realizará mediante playbooks de Ansible.

### Prerrequisitos
- **Cuenta de Azure**: Con permisos para crear recursos (grupo de recursos, red, VMs, etc.).
- **Credenciales y autenticación en Azure**: Puedes usar un *service principal* o configurar el Azure CLI para que Ansible se conecte mediante los módulos *azure_rm_*.
- **Ansible instalado** en tu máquina de control (por ejemplo, en tu laptop o máquina de administración).
- Conocimientos básicos de Linux, Kubernetes y Ansible.
- (Opcional) Conocimientos básicos de YAML para entender la estructura de los playbooks.

Pasos para pre-requisitos: 

________________________________________

1. Provisionar una VM en Azure con Ubuntu 22.04
Puedes crear la VM utilizando el portal de Azure o la CLI. Aquí te muestro cómo hacerlo con la Azure CLI:


1.	Inicia sesión en Azure:
2.	az login
Esto abrirá una ventana en tu navegador para autenticarte. Si ya tienes la sesión iniciada, se mostrará la información de tu cuenta.
3.	Crea un grupo de recursos (si aún no lo tienes):
4.	az group create --name myResourceGroup --location eastus
5.	Crea la VM especificando Ubuntu 22.04:
Para asegurarte de usar Ubuntu 22.04, utiliza la imagen de Canonical para "jammy". Puedes ejecutar:
az vm create \
  --resource-group myResourceGroup \
  --name myAnsibleVM \
  --image Canonical:0001-com-ubuntu-server-jammy:22_04-lts:latest \
  --admin-username azureuser \
  --authentication-type password \
  --admin-password "TuContraseñaSegura123!" \
  --size Standard_D2s_v3



Con esto tendrás una VM corriendo Ubuntu 22.04 que servirá como máquina de control.
________________________________________

2. Instalar Ansible, Python y demás dependencias en la VM

Una vez creada la VM, conéctate a ella mediante SSH:
ssh azureuser@<IP_PUBLICA_DE_LA_VM>
Dentro de la VM, ejecuta los siguientes pasos:
1.	Actualiza el sistema:
2.	sudo apt update && sudo apt upgrade -y
3.	Instala Python y pip:
Aunque Ubuntu 22.04 trae Python3, asegúrate de tenerlo junto con pip:
sudo apt install python3 python3-pip -y
4.	Instala Ansible:
La forma más sencilla es usar el repositorio de paquetes:
sudo apt install ansible -y
Verifica la instalación con:
ansible --version

________________________________________

3. Instalar Azure CLI en la VM

Para interactuar con Azure desde la máquina de control, instala Azure CLI:
1.	Ejecuta el script de instalación oficial:
2.	curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
3.	Verifica la instalación:
4.	az --version

Con esto ya tendrás Azure CLI listo para ejecutar comandos.

________________________________________

4. Crear un Service Principal en Azure

Un Service Principal es una identidad que le permite a Ansible (y otros clientes) autenticarse de forma programática en Azure sin necesidad de usar tus credenciales personales. Sigue estos pasos:
1.	Obtén tu ID de suscripción:
Ejecuta:
az account show --query id -o tsv
Guarda este valor, lo necesitarás para establecer el scope.

2.	Crea el Service Principal:

Utiliza el siguiente comando, reemplazando "ansible-sp" por el nombre que prefieras:
az ad sp create-for-rbac --name "ansible-sp" --role Contributor --scopes /subscriptions/<TU_SUBSCRIPTION_ID>
Por ejemplo, si tu suscripción es 12345678-90ab-cdef-1234-567890abcdef, el comando sería:
az ad sp create-for-rbac --name "ansible-sp" --role Contributor --scopes /subscriptions/12345678-90ab-cdef-1234-567890abcdef
Este comando devolverá un JSON similar a:
{
  "appId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "displayName": "ansible-sp",
  "name": "http://ansible-sp",
  "password": "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy",
  "tenant": "zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz"
}

Guarda con seguridad los valores de appId (Client ID), password (Client Secret) y tenant, ya que los necesitarás para la autenticación.

________________________________________

5. Configurar las credenciales en Ansible

Para que los módulos de Azure en Ansible se autentiquen correctamente, debes exponer las siguientes variables de entorno en la máquina de control (puedes agregarlas a tu archivo ~/.bashrc o ~/.profile):
export AZURE_SUBSCRIPTION_ID="<TU_SUBSCRIPTION_ID>"
export AZURE_CLIENT_ID="<APP_ID_DEL_SP>"
export AZURE_SECRET="<PASSWORD_DEL_SP>"
export AZURE_TENANT="<TENANT_ID_DEL_SP>"

Por ejemplo:

export AZURE_SUBSCRIPTION_ID="12345678-90ab-cdef-1234-567890abcdef"
export AZURE_CLIENT_ID="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
export AZURE_SECRET="yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy"
export AZURE_TENANT="zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz"

Después de agregarlas al archivo, ejecuta:

source ~/.bashrc

De esta forma, al ejecutar tus playbooks de Ansible que usen módulos azure_rm_ (como azure_rm_virtualmachine, azure_rm_resourcegroup, etc.), Ansible tomará automáticamente estas variables para autenticarse en Azure.

________________________________________

Resumen Final

1.	Provisiona una VM en Azure con Ubuntu 22.04 (puedes usar el comando az vm create).
2.	Conéctate a la VM y actualiza el sistema, instalando Python, pip, y Ansible.
3.	Instala Azure CLI en la VM usando el script oficial.
4.	Crea un Service Principal con el comando az ad sp create-for-rbac y guarda el appId, password y tenant.
5.	Configura las variables de entorno (AZURE_SUBSCRIPTION_ID, AZURE_CLIENT_ID, AZURE_SECRET y AZURE_TENANT) en la VM para que Ansible pueda autenticarse correctamente en Azure.
Con estos pasos tendrás tu entorno preparado para utilizar Ansible junto con Azure CLI y conectarte a Azure mediante el Service Principal, lo que te permitirá automatizar la provisión y administración de recursos en Azure de forma segura y controlada.

**************************************************************************************************************************************************************
**************************************************************************************************************************************************************

---

## 2. Estructura General del Taller

El taller se dividirá en cuatro bloques principales:

1. **Provisionamiento de la Infraestructura en Azure**  
   Utilizaremos los módulos de Ansible para crear el grupo de recursos, la red virtual, la subred, las interfaces de red y las dos VMs (control plane y worker).

2. **Configuración de las VMs para Kubernetes**  
   En cada VM instalaremos las dependencias necesarias: actualizaciones, Docker (o containerd), y los paquetes de Kubernetes (*kubeadm*, *kubelet* y *kubectl*). Además, se deshabilitará el *swap* y se ajustarán algunos parámetros de red.

3. **Inicialización del Cluster Kubernetes**  
   Desde el nodo de control se inicializará el cluster con *kubeadm init* (definiendo, por ejemplo, un rango para la red de pods) y se configurará el archivo kubeconfig. Luego se generará el comando para unir el nodo worker, el cual se ejecutará en el nodo worker.

4. **Despliegue de Jenkins en el Cluster**  
   Finalmente se creará un Deployment (y un Service para exponerlo) de Jenkins en Kubernetes, utilizando el módulo *k8s* de Ansible para aplicar la definición YAML.

---

## 3. Paso a Paso

### 3.1 Provisionamiento de la Infraestructura en Azure

Crearemos un playbook (por ejemplo, `azure_infra.yml`) que incluya las siguientes tareas:

1. **Crear el Grupo de Recursos**  
   ```yaml
   - name: Crear grupo de recursos
     azure_rm_resourcegroup:
       name: rg-k8s-taller
       location: eastus
   ```

2. **Crear Red Virtual y Subred**  
   ```yaml
   - name: Crear red virtual
     azure_rm_virtualnetwork:
       resource_group: rg-k8s-taller
       name: vnet-k8s
       address_prefixes: "10.0.0.0/16"
       location: eastus

   - name: Crear subred
     azure_rm_subnet:
       resource_group: rg-k8s-taller
       name: subnet-k8s
       address_prefix: "10.0.1.0/24"
       virtual_network: vnet-k8s
   ```

3. **Crear Interfaces de Red para cada VM**  
   - Para el nodo *control plane*:
     ```yaml
     - name: Crear NIC para control plane
       azure_rm_networkinterface:
         resource_group: rg-k8s-taller
         name: nic-control
         virtual_network: vnet-k8s
         subnet: subnet-k8s
         location: eastus
     ```
   - Para el nodo *worker*:
     ```yaml
     - name: Crear NIC para worker
       azure_rm_networkinterface:
         resource_group: rg-k8s-taller
         name: nic-worker
         virtual_network: vnet-k8s
         subnet: subnet-k8s
         location: eastus
     ```

4. **Crear las VMs**  
   Utiliza el módulo `azure_rm_virtualmachine` para cada nodo. Por ejemplo, para el nodo *control plane*:
   ```yaml
   - name: Crear VM control plane
     azure_rm_virtualmachine:
       resource_group: rg-k8s-taller
       name: vm-control
       vm_size: Standard_D2s_v3
       admin_username: azureuser
       ssh_password_enabled: true
       admin_password: "TuPasswordSeguro123!"
       network_interfaces: [nic-control]
       image:
         publisher: Canonical
         offer: UbuntuServer
         sku: "22_04-lts-gen2"
         version: latest
       location: eastus
   ```
   Y de manera similar para el nodo *worker*:
   ```yaml
   - name: Crear VM worker
     azure_rm_virtualmachine:
       resource_group: rg-k8s-taller
       name: vm-worker
       vm_size: Standard_D2s_v3
       admin_username: azureuser
       ssh_password_enabled: true
       admin_password: "TuPasswordSeguro123!"
       network_interfaces: [nic-worker]
       image:
         publisher: Canonical
         offer: UbuntuServer
         sku: "22_04-lts-gen2"
         version: latest
       location: eastus
   ```
> **Nota:** Asegúrate de ajustar las contraseñas y otros parámetros de seguridad de acuerdo a las buenas prácticas.

Una vez ejecutado este playbook, obtendrás dos VMs en Azure. Registra las direcciones IP públicas para incluirlas en el inventario de Ansible.

---

### 3.2 Configuración de los Nodos para Kubernetes

Con las VMs ya provisionadas, se procede a instalar y configurar todo lo necesario para que actúen como nodos de un cluster Kubernetes. Puedes preparar un playbook (por ejemplo, `setup_k8s_nodes.yml`) que se ejecute contra ambos nodos.

#### Archivo de inventario (hosts.ini)
```ini
[control]
control ansible_host=<IP_PUBLICA_CONTROL> ansible_user=azureuser

[worker]
worker ansible_host=<IP_PUBLICA_WORKER> ansible_user=azureuser
```

#### Playbook para configuración de nodos
```yaml
- name: Configurar nodos para Kubernetes
  hosts: control,worker
  become: yes
  tasks:
    - name: Actualizar repositorios y paquetes
      apt:
        update_cache: yes
        upgrade: dist

    - name: Instalar dependencias básicas
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Deshabilitar swap temporalmente
      command: swapoff -a

    - name: Deshabilitar swap de forma persistente
      replace:
        path: /etc/fstab
        regexp: '(^.*swap.*$)'
        replace: '# \1'
      notify: Reboot if necessary

    - name: Instalar Docker
      apt:
        name: docker.io
        state: present

    - name: Habilitar e iniciar Docker
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Agregar llave GPG de Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Agregar repositorio de Kubernetes
      apt_repository:
        repo: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
        state: present

    - name: Instalar kubeadm, kubelet y kubectl
      apt:
        name:
          - kubeadm
          - kubelet
          - kubectl
        state: present
        update_cache: yes

  handlers:
    - name: Reboot if necessary
      reboot:
        msg: "Rebooting to apply swap changes"
        pre_reboot_delay: 5
```

Este playbook se encarga de actualizar el sistema, instalar las dependencias, Docker y los paquetes de Kubernetes, además de deshabilitar el swap (requisito para Kubernetes).

---

### 3.3 Inicialización del Cluster Kubernetes

Dividiremos este proceso en dos plays, uno para el nodo *control* y otro para el nodo *worker*.

#### Play para el nodo de Control Plane
```yaml
- name: Inicializar cluster Kubernetes en el nodo control plane
  hosts: control
  become: yes
  tasks:
    - name: Inicializar el cluster con kubeadm
      shell: kubeadm init --pod-network-cidr=10.244.0.0/16
      register: kubeadm_init
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Crear directorio .kube para el usuario azureuser
      file:
        path: /home/azureuser/.kube
        state: directory
        owner: azureuser
        mode: 0755

    - name: Copiar el archivo de configuración de Kubernetes
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/azureuser/.kube/config
        owner: azureuser
        mode: 0644

    - name: Instalar red de pods (Flannel, por ejemplo)
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Obtener comando de join para unir nodos workers
      shell: kubeadm token create --print-join-command
      register: join_command
```

> **Importante:** En este play se configura el kubeconfig para el usuario (en este ejemplo, *azureuser*). Además, se aplica una red para los pods (en este ejemplo usamos Flannel; puedes elegir otra según tus preferencias).

#### Play para el nodo Worker
```yaml
- name: Unir nodo worker al cluster
  hosts: worker
  become: yes
  tasks:
    - name: Ejecutar comando join en el nodo worker
      shell: "{{ hostvars[groups['control'][0]].join_command.stdout }} --ignore-preflight-errors=all"
      args:
        warn: false
```

> **Nota:** Usamos `hostvars` para obtener el comando de join generado en el nodo de control. El parámetro `--ignore-preflight-errors=all` puede ayudar en ambientes de testing, pero en producción convendría solucionar esos errores.

---

### 3.4 Despliegue de Jenkins en Kubernetes

Una vez que el cluster esté funcionando, procederemos a desplegar Jenkins mediante un Deployment y un Service.

#### 3.4.1 Definición YAML para Jenkins

Crea un archivo llamado `jenkins-deployment.yaml` con el siguiente contenido (puedes combinar ambos objetos o separarlos en dos archivos):

```yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  labels:
    app: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      containers:
      - name: jenkins
        image: jenkins/jenkins:lts
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-service
spec:
  type: NodePort
  selector:
    app: jenkins
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
    nodePort: 30000
```

#### 3.4.2 Playbook para desplegar Jenkins

Utilizaremos el módulo `k8s` de Ansible para aplicar la definición YAML. Crea un playbook (por ejemplo, `deploy_jenkins.yml`) que se ejecute en el nodo control (donde tenemos el kubeconfig):

```yaml
- name: Desplegar Jenkins en el cluster Kubernetes
  hosts: control
  become: yes
  tasks:
    - name: Instalar cliente Python para Kubernetes
      pip:
        name: kubernetes
        state: present

    - name: Aplicar manifiesto de Jenkins
      k8s:
        state: present
        definition: "{{ lookup('file', 'jenkins-deployment.yaml') }}"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
```

Con este playbook se crea el Deployment y el Service, y Jenkins quedará expuesto en el puerto 30000 de los nodos.

---

## 4. Ejecución y Validación

1. **Provisiona la infraestructura en Azure**  
   Ejecuta el playbook `azure_infra.yml`:
   ```bash
   ansible-playbook azure_infra.yml
   ```

2. **Configura los nodos para Kubernetes**  
   Conecta tus VMs al inventario (archivo `hosts.ini`) y ejecuta:
   ```bash
   ansible-playbook -i hosts.ini setup_k8s_nodes.yml
   ```

3. **Inicializa el cluster**  
   Primero ejecuta el play para el nodo *control*:
   ```bash
   ansible-playbook -i hosts.ini init_control_plane.yml
   ```
   Luego ejecuta el play para el nodo *worker*:
   ```bash
   ansible-playbook -i hosts.ini join_worker.yml
   ```

4. **Despliega Jenkins**  
   Finalmente, desde el nodo control, aplica el manifiesto de Jenkins:
   ```bash
   ansible-playbook -i hosts.ini deploy_jenkins.yml
   ```

5. **Validación**  
   - Desde el nodo control o desde tu máquina de administración (con el kubeconfig correspondiente), ejecuta:
     ```bash
     kubectl get nodes
     kubectl get pods -A
     ```
     Deberías ver el nodo control y el nodo worker unidos y el pod de Jenkins en ejecución.
   - Accede a Jenkins navegando a `http://<IP_de_algún_nodo>:30000`.

---

## 5. Consideraciones Finales

- **Seguridad**: Asegúrate de gestionar adecuadamente las contraseñas y claves SSH, y de utilizar conexiones seguras en un ambiente de producción.
- **Variables y Roles**: En un entorno real se recomienda estructurar el playbook en roles (por ejemplo, un rol para la provisión en Azure, otro para la configuración de nodos y otro para el despliegue en Kubernetes) y utilizar *variables* para facilitar la personalización.
- **Errores comunes**:  
  - Verifica que el token generado en el nodo control no expire antes de ejecutarlo en el nodo worker.  
  - Asegúrate de que las VMs puedan comunicarse entre sí (revisa reglas de red y NSG en Azure).

Con este taller tendrás un flujo completo y automatizado para desplegar un cluster Kubernetes en Azure (sin usar AKS) y realizar el despliegue de Jenkins utilizando Ansible. 

---
